// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cron/server/log/cron_log.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetLogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLogRequestMultiError, or
// nil if none found.
func (m *GetLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := GetLogRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetLogRequestMultiError(errors)
	}

	return nil
}

// GetLogRequestMultiError is an error wrapping multiple validation errors
// returned by GetLogRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogRequestMultiError) AllErrors() []error { return m }

// GetLogRequestValidationError is the validation error returned by
// GetLogRequest.Validate if the designated constraints aren't met.
type GetLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogRequestValidationError) ErrorName() string { return "GetLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogRequestValidationError{}

// Validate checks the field values on GetLogReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLogReplyMultiError, or
// nil if none found.
func (m *GetLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for WorkerId

	// no validation rules for WorkerSnapshot

	// no validation rules for TaskId

	// no validation rules for TaskSnapshot

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for Content

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLogReplyMultiError(errors)
	}

	return nil
}

// GetLogReplyMultiError is an error wrapping multiple validation errors
// returned by GetLogReply.ValidateAll() if the designated constraints aren't met.
type GetLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogReplyMultiError) AllErrors() []error { return m }

// GetLogReplyValidationError is the validation error returned by
// GetLogReply.Validate if the designated constraints aren't met.
type GetLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogReplyValidationError) ErrorName() string { return "GetLogReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogReplyValidationError{}

// Validate checks the field values on ListLogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListLogRequestMultiError,
// or nil if none found.
func (m *ListLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListLogRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListLogRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTaskId() <= 0 {
		err := ListLogRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListLogRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListLogRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListLogRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListLogRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListLogRequestMultiError(errors)
	}

	return nil
}

// ListLogRequestMultiError is an error wrapping multiple validation errors
// returned by ListLogRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogRequestMultiError) AllErrors() []error { return m }

// ListLogRequestValidationError is the validation error returned by
// ListLogRequest.Validate if the designated constraints aren't met.
type ListLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogRequestValidationError) ErrorName() string { return "ListLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogRequestValidationError{}

var _ListLogRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListLogRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListLogReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListLogReplyMultiError, or
// nil if none found.
func (m *ListLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLogReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLogReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLogReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLogReplyMultiError(errors)
	}

	return nil
}

// ListLogReplyMultiError is an error wrapping multiple validation errors
// returned by ListLogReply.ValidateAll() if the designated constraints aren't met.
type ListLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogReplyMultiError) AllErrors() []error { return m }

// ListLogReplyValidationError is the validation error returned by
// ListLogReply.Validate if the designated constraints aren't met.
type ListLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogReplyValidationError) ErrorName() string { return "ListLogReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogReplyValidationError{}

// Validate checks the field values on CreateLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLogRequestMultiError, or nil if none found.
func (m *CreateLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := CreateLogRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWorkerId() <= 0 {
		err := CreateLogRequestValidationError{
			field:  "WorkerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkerSnapshot()) < 1 {
		err := CreateLogRequestValidationError{
			field:  "WorkerSnapshot",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTaskId() <= 0 {
		err := CreateLogRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTaskSnapshot()) < 1 {
		err := CreateLogRequestValidationError{
			field:  "TaskSnapshot",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartAt

	// no validation rules for EndAt

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CreateLogRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatus()) < 1 {
		err := CreateLogRequestValidationError{
			field:  "Status",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateLogRequestMultiError(errors)
	}

	return nil
}

// CreateLogRequestMultiError is an error wrapping multiple validation errors
// returned by CreateLogRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLogRequestMultiError) AllErrors() []error { return m }

// CreateLogRequestValidationError is the validation error returned by
// CreateLogRequest.Validate if the designated constraints aren't met.
type CreateLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLogRequestValidationError) ErrorName() string { return "CreateLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLogRequestValidationError{}

// Validate checks the field values on CreateLogReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLogReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateLogReplyMultiError,
// or nil if none found.
func (m *CreateLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateLogReplyMultiError(errors)
	}

	return nil
}

// CreateLogReplyMultiError is an error wrapping multiple validation errors
// returned by CreateLogReply.ValidateAll() if the designated constraints
// aren't met.
type CreateLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLogReplyMultiError) AllErrors() []error { return m }

// CreateLogReplyValidationError is the validation error returned by
// CreateLogReply.Validate if the designated constraints aren't met.
type CreateLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLogReplyValidationError) ErrorName() string { return "CreateLogReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLogReplyValidationError{}

// Validate checks the field values on UpdateLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLogRequestMultiError, or nil if none found.
func (m *UpdateLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateLogRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := UpdateLogRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWorkerId() <= 0 {
		err := UpdateLogRequestValidationError{
			field:  "WorkerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkerSnapshot()) < 1 {
		err := UpdateLogRequestValidationError{
			field:  "WorkerSnapshot",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTaskId() <= 0 {
		err := UpdateLogRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTaskSnapshot()) < 1 {
		err := UpdateLogRequestValidationError{
			field:  "TaskSnapshot",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartAt

	// no validation rules for EndAt

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := UpdateLogRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatus()) < 1 {
		err := UpdateLogRequestValidationError{
			field:  "Status",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateLogRequestMultiError(errors)
	}

	return nil
}

// UpdateLogRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateLogRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLogRequestMultiError) AllErrors() []error { return m }

// UpdateLogRequestValidationError is the validation error returned by
// UpdateLogRequest.Validate if the designated constraints aren't met.
type UpdateLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLogRequestValidationError) ErrorName() string { return "UpdateLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLogRequestValidationError{}

// Validate checks the field values on UpdateLogReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLogReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateLogReplyMultiError,
// or nil if none found.
func (m *UpdateLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateLogReplyMultiError(errors)
	}

	return nil
}

// UpdateLogReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateLogReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLogReplyMultiError) AllErrors() []error { return m }

// UpdateLogReplyValidationError is the validation error returned by
// UpdateLogReply.Validate if the designated constraints aren't met.
type UpdateLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLogReplyValidationError) ErrorName() string { return "UpdateLogReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLogReplyValidationError{}

// Validate checks the field values on DeleteLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLogRequestMultiError, or nil if none found.
func (m *DeleteLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteLogRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteLogRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteLogRequest_Ids_Unique[item]; exists {
			err := DeleteLogRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteLogRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteLogRequestMultiError(errors)
	}

	return nil
}

// DeleteLogRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteLogRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLogRequestMultiError) AllErrors() []error { return m }

// DeleteLogRequestValidationError is the validation error returned by
// DeleteLogRequest.Validate if the designated constraints aren't met.
type DeleteLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLogRequestValidationError) ErrorName() string { return "DeleteLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLogRequestValidationError{}

// Validate checks the field values on DeleteLogReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLogReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteLogReplyMultiError,
// or nil if none found.
func (m *DeleteLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteLogReplyMultiError(errors)
	}

	return nil
}

// DeleteLogReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteLogReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLogReplyMultiError) AllErrors() []error { return m }

// DeleteLogReplyValidationError is the validation error returned by
// DeleteLogReply.Validate if the designated constraints aren't met.
type DeleteLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLogReplyValidationError) ErrorName() string { return "DeleteLogReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLogReplyValidationError{}

// Validate checks the field values on ListLogReply_Log with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLogReply_Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogReply_Log with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogReply_LogMultiError, or nil if none found.
func (m *ListLogReply_Log) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogReply_Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for WorkerId

	// no validation rules for TaskId

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for Status

	if len(errors) > 0 {
		return ListLogReply_LogMultiError(errors)
	}

	return nil
}

// ListLogReply_LogMultiError is an error wrapping multiple validation errors
// returned by ListLogReply_Log.ValidateAll() if the designated constraints
// aren't met.
type ListLogReply_LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogReply_LogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogReply_LogMultiError) AllErrors() []error { return m }

// ListLogReply_LogValidationError is the validation error returned by
// ListLogReply_Log.Validate if the designated constraints aren't met.
type ListLogReply_LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogReply_LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogReply_LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogReply_LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogReply_LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogReply_LogValidationError) ErrorName() string { return "ListLogReply_LogValidationError" }

// Error satisfies the builtin error interface
func (e ListLogReply_LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogReply_Log.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogReply_LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogReply_LogValidationError{}
