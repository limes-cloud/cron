// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/cron/server/task/cron_task_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Task_GetTaskGroup_FullMethodName     = "/cron.api.server.cron.task.v1.Task/GetTaskGroup"
	Task_ListTaskGroup_FullMethodName    = "/cron.api.server.cron.task.v1.Task/ListTaskGroup"
	Task_CreateTaskGroup_FullMethodName  = "/cron.api.server.cron.task.v1.Task/CreateTaskGroup"
	Task_UpdateTaskGroup_FullMethodName  = "/cron.api.server.cron.task.v1.Task/UpdateTaskGroup"
	Task_DeleteTaskGroup_FullMethodName  = "/cron.api.server.cron.task.v1.Task/DeleteTaskGroup"
	Task_GetTask_FullMethodName          = "/cron.api.server.cron.task.v1.Task/GetTask"
	Task_ListTask_FullMethodName         = "/cron.api.server.cron.task.v1.Task/ListTask"
	Task_CreateTask_FullMethodName       = "/cron.api.server.cron.task.v1.Task/CreateTask"
	Task_UpdateTask_FullMethodName       = "/cron.api.server.cron.task.v1.Task/UpdateTask"
	Task_UpdateTaskStatus_FullMethodName = "/cron.api.server.cron.task.v1.Task/UpdateTaskStatus"
	Task_DeleteTask_FullMethodName       = "/cron.api.server.cron.task.v1.Task/DeleteTask"
	Task_ExecTask_FullMethodName         = "/cron.api.server.cron.task.v1.Task/ExecTask"
	Task_CancelExecTask_FullMethodName   = "/cron.api.server.cron.task.v1.Task/CancelExecTask"
)

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	// GetTaskGroup 获取指定的任务分组
	GetTaskGroup(ctx context.Context, in *GetTaskGroupRequest, opts ...grpc.CallOption) (*GetTaskGroupReply, error)
	// ListTaskGroup 获取任务分组列表
	ListTaskGroup(ctx context.Context, in *ListTaskGroupRequest, opts ...grpc.CallOption) (*ListTaskGroupReply, error)
	// CreateTaskGroup 创建任务分组
	CreateTaskGroup(ctx context.Context, in *CreateTaskGroupRequest, opts ...grpc.CallOption) (*CreateTaskGroupReply, error)
	// UpdateTaskGroup 更新任务分组
	UpdateTaskGroup(ctx context.Context, in *UpdateTaskGroupRequest, opts ...grpc.CallOption) (*UpdateTaskGroupReply, error)
	// DeleteTaskGroup 删除任务分组
	DeleteTaskGroup(ctx context.Context, in *DeleteTaskGroupRequest, opts ...grpc.CallOption) (*DeleteTaskGroupReply, error)
	// GetTask 获取指定的任务信息
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error)
	// ListTask 获取任务信息列表
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskReply, error)
	// CreateTask 创建任务信息
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error)
	// UpdateTask 更新任务信息
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskReply, error)
	// UpdateTaskStatus 更新任务信息状态
	UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*UpdateTaskStatusReply, error)
	// DeleteTask 删除任务信息
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskReply, error)
	// ExecTask 立即执行任务
	ExecTask(ctx context.Context, in *ExecTaskRequest, opts ...grpc.CallOption) (*ExecTaskReply, error)
	// CancelExecTask 取消指定任务
	CancelExecTask(ctx context.Context, in *CancelExecTaskRequest, opts ...grpc.CallOption) (*CancelExecTaskReply, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) GetTaskGroup(ctx context.Context, in *GetTaskGroupRequest, opts ...grpc.CallOption) (*GetTaskGroupReply, error) {
	out := new(GetTaskGroupReply)
	err := c.cc.Invoke(ctx, Task_GetTaskGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ListTaskGroup(ctx context.Context, in *ListTaskGroupRequest, opts ...grpc.CallOption) (*ListTaskGroupReply, error) {
	out := new(ListTaskGroupReply)
	err := c.cc.Invoke(ctx, Task_ListTaskGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateTaskGroup(ctx context.Context, in *CreateTaskGroupRequest, opts ...grpc.CallOption) (*CreateTaskGroupReply, error) {
	out := new(CreateTaskGroupReply)
	err := c.cc.Invoke(ctx, Task_CreateTaskGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateTaskGroup(ctx context.Context, in *UpdateTaskGroupRequest, opts ...grpc.CallOption) (*UpdateTaskGroupReply, error) {
	out := new(UpdateTaskGroupReply)
	err := c.cc.Invoke(ctx, Task_UpdateTaskGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DeleteTaskGroup(ctx context.Context, in *DeleteTaskGroupRequest, opts ...grpc.CallOption) (*DeleteTaskGroupReply, error) {
	out := new(DeleteTaskGroupReply)
	err := c.cc.Invoke(ctx, Task_DeleteTaskGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error) {
	out := new(GetTaskReply)
	err := c.cc.Invoke(ctx, Task_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskReply, error) {
	out := new(ListTaskReply)
	err := c.cc.Invoke(ctx, Task_ListTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error) {
	out := new(CreateTaskReply)
	err := c.cc.Invoke(ctx, Task_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskReply, error) {
	out := new(UpdateTaskReply)
	err := c.cc.Invoke(ctx, Task_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*UpdateTaskStatusReply, error) {
	out := new(UpdateTaskStatusReply)
	err := c.cc.Invoke(ctx, Task_UpdateTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskReply, error) {
	out := new(DeleteTaskReply)
	err := c.cc.Invoke(ctx, Task_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ExecTask(ctx context.Context, in *ExecTaskRequest, opts ...grpc.CallOption) (*ExecTaskReply, error) {
	out := new(ExecTaskReply)
	err := c.cc.Invoke(ctx, Task_ExecTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CancelExecTask(ctx context.Context, in *CancelExecTaskRequest, opts ...grpc.CallOption) (*CancelExecTaskReply, error) {
	out := new(CancelExecTaskReply)
	err := c.cc.Invoke(ctx, Task_CancelExecTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	// GetTaskGroup 获取指定的任务分组
	GetTaskGroup(context.Context, *GetTaskGroupRequest) (*GetTaskGroupReply, error)
	// ListTaskGroup 获取任务分组列表
	ListTaskGroup(context.Context, *ListTaskGroupRequest) (*ListTaskGroupReply, error)
	// CreateTaskGroup 创建任务分组
	CreateTaskGroup(context.Context, *CreateTaskGroupRequest) (*CreateTaskGroupReply, error)
	// UpdateTaskGroup 更新任务分组
	UpdateTaskGroup(context.Context, *UpdateTaskGroupRequest) (*UpdateTaskGroupReply, error)
	// DeleteTaskGroup 删除任务分组
	DeleteTaskGroup(context.Context, *DeleteTaskGroupRequest) (*DeleteTaskGroupReply, error)
	// GetTask 获取指定的任务信息
	GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error)
	// ListTask 获取任务信息列表
	ListTask(context.Context, *ListTaskRequest) (*ListTaskReply, error)
	// CreateTask 创建任务信息
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error)
	// UpdateTask 更新任务信息
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskReply, error)
	// UpdateTaskStatus 更新任务信息状态
	UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*UpdateTaskStatusReply, error)
	// DeleteTask 删除任务信息
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskReply, error)
	// ExecTask 立即执行任务
	ExecTask(context.Context, *ExecTaskRequest) (*ExecTaskReply, error)
	// CancelExecTask 取消指定任务
	CancelExecTask(context.Context, *CancelExecTaskRequest) (*CancelExecTaskReply, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) GetTaskGroup(context.Context, *GetTaskGroupRequest) (*GetTaskGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskGroup not implemented")
}
func (UnimplementedTaskServer) ListTaskGroup(context.Context, *ListTaskGroupRequest) (*ListTaskGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskGroup not implemented")
}
func (UnimplementedTaskServer) CreateTaskGroup(context.Context, *CreateTaskGroupRequest) (*CreateTaskGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskGroup not implemented")
}
func (UnimplementedTaskServer) UpdateTaskGroup(context.Context, *UpdateTaskGroupRequest) (*UpdateTaskGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskGroup not implemented")
}
func (UnimplementedTaskServer) DeleteTaskGroup(context.Context, *DeleteTaskGroupRequest) (*DeleteTaskGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskGroup not implemented")
}
func (UnimplementedTaskServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServer) ListTask(context.Context, *ListTaskRequest) (*ListTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedTaskServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServer) UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*UpdateTaskStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedTaskServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServer) ExecTask(context.Context, *ExecTaskRequest) (*ExecTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecTask not implemented")
}
func (UnimplementedTaskServer) CancelExecTask(context.Context, *CancelExecTaskRequest) (*CancelExecTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExecTask not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_GetTaskGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetTaskGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskGroup(ctx, req.(*GetTaskGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ListTaskGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ListTaskGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_ListTaskGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ListTaskGroup(ctx, req.(*ListTaskGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateTaskGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateTaskGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CreateTaskGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateTaskGroup(ctx, req.(*CreateTaskGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateTaskGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateTaskGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_UpdateTaskGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateTaskGroup(ctx, req.(*UpdateTaskGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DeleteTaskGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DeleteTaskGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DeleteTaskGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DeleteTaskGroup(ctx, req.(*DeleteTaskGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_ListTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateTaskStatus(ctx, req.(*UpdateTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ExecTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ExecTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_ExecTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ExecTask(ctx, req.(*ExecTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CancelExecTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelExecTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CancelExecTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CancelExecTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CancelExecTask(ctx, req.(*CancelExecTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cron.api.server.cron.task.v1.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskGroup",
			Handler:    _Task_GetTaskGroup_Handler,
		},
		{
			MethodName: "ListTaskGroup",
			Handler:    _Task_ListTaskGroup_Handler,
		},
		{
			MethodName: "CreateTaskGroup",
			Handler:    _Task_CreateTaskGroup_Handler,
		},
		{
			MethodName: "UpdateTaskGroup",
			Handler:    _Task_UpdateTaskGroup_Handler,
		},
		{
			MethodName: "DeleteTaskGroup",
			Handler:    _Task_DeleteTaskGroup_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Task_GetTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _Task_ListTask_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Task_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Task_UpdateTask_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _Task_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Task_DeleteTask_Handler,
		},
		{
			MethodName: "ExecTask",
			Handler:    _Task_ExecTask_Handler,
		},
		{
			MethodName: "CancelExecTask",
			Handler:    _Task_CancelExecTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cron/server/task/cron_task_service.proto",
}
