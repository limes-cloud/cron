// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cron/server/task/cron_task_group.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskGroupRequestMultiError, or nil if none found.
func (m *GetTaskGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetTaskGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTaskGroupRequestMultiError(errors)
	}

	return nil
}

// GetTaskGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetTaskGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTaskGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskGroupRequestMultiError) AllErrors() []error { return m }

// GetTaskGroupRequestValidationError is the validation error returned by
// GetTaskGroupRequest.Validate if the designated constraints aren't met.
type GetTaskGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskGroupRequestValidationError) ErrorName() string {
	return "GetTaskGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskGroupRequestValidationError{}

// Validate checks the field values on GetTaskGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTaskGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskGroupReplyMultiError, or nil if none found.
func (m *GetTaskGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetTaskGroupReplyMultiError(errors)
	}

	return nil
}

// GetTaskGroupReplyMultiError is an error wrapping multiple validation errors
// returned by GetTaskGroupReply.ValidateAll() if the designated constraints
// aren't met.
type GetTaskGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskGroupReplyMultiError) AllErrors() []error { return m }

// GetTaskGroupReplyValidationError is the validation error returned by
// GetTaskGroupReply.Validate if the designated constraints aren't met.
type GetTaskGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskGroupReplyValidationError) ErrorName() string {
	return "GetTaskGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskGroupReplyValidationError{}

// Validate checks the field values on ListTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskGroupRequestMultiError, or nil if none found.
func (m *ListTaskGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListTaskGroupRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListTaskGroupRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListTaskGroupRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListTaskGroupRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListTaskGroupRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListTaskGroupRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListTaskGroupRequestMultiError(errors)
	}

	return nil
}

// ListTaskGroupRequestMultiError is an error wrapping multiple validation
// errors returned by ListTaskGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTaskGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskGroupRequestMultiError) AllErrors() []error { return m }

// ListTaskGroupRequestValidationError is the validation error returned by
// ListTaskGroupRequest.Validate if the designated constraints aren't met.
type ListTaskGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskGroupRequestValidationError) ErrorName() string {
	return "ListTaskGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskGroupRequestValidationError{}

var _ListTaskGroupRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListTaskGroupRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskGroupReplyMultiError, or nil if none found.
func (m *ListTaskGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTaskGroupReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTaskGroupReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaskGroupReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTaskGroupReplyMultiError(errors)
	}

	return nil
}

// ListTaskGroupReplyMultiError is an error wrapping multiple validation errors
// returned by ListTaskGroupReply.ValidateAll() if the designated constraints
// aren't met.
type ListTaskGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskGroupReplyMultiError) AllErrors() []error { return m }

// ListTaskGroupReplyValidationError is the validation error returned by
// ListTaskGroupReply.Validate if the designated constraints aren't met.
type ListTaskGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskGroupReplyValidationError) ErrorName() string {
	return "ListTaskGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskGroupReplyValidationError{}

// Validate checks the field values on CreateTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskGroupRequestMultiError, or nil if none found.
func (m *CreateTaskGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateTaskGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateTaskGroupRequestMultiError(errors)
	}

	return nil
}

// CreateTaskGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTaskGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTaskGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskGroupRequestMultiError) AllErrors() []error { return m }

// CreateTaskGroupRequestValidationError is the validation error returned by
// CreateTaskGroupRequest.Validate if the designated constraints aren't met.
type CreateTaskGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskGroupRequestValidationError) ErrorName() string {
	return "CreateTaskGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskGroupRequestValidationError{}

// Validate checks the field values on CreateTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskGroupReplyMultiError, or nil if none found.
func (m *CreateTaskGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTaskGroupReplyMultiError(errors)
	}

	return nil
}

// CreateTaskGroupReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTaskGroupReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTaskGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskGroupReplyMultiError) AllErrors() []error { return m }

// CreateTaskGroupReplyValidationError is the validation error returned by
// CreateTaskGroupReply.Validate if the designated constraints aren't met.
type CreateTaskGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskGroupReplyValidationError) ErrorName() string {
	return "CreateTaskGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskGroupReplyValidationError{}

// Validate checks the field values on UpdateTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskGroupRequestMultiError, or nil if none found.
func (m *UpdateTaskGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateTaskGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateTaskGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateTaskGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateTaskGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTaskGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTaskGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskGroupRequestMultiError) AllErrors() []error { return m }

// UpdateTaskGroupRequestValidationError is the validation error returned by
// UpdateTaskGroupRequest.Validate if the designated constraints aren't met.
type UpdateTaskGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskGroupRequestValidationError) ErrorName() string {
	return "UpdateTaskGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskGroupRequestValidationError{}

// Validate checks the field values on UpdateTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskGroupReplyMultiError, or nil if none found.
func (m *UpdateTaskGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTaskGroupReplyMultiError(errors)
	}

	return nil
}

// UpdateTaskGroupReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTaskGroupReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateTaskGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskGroupReplyMultiError) AllErrors() []error { return m }

// UpdateTaskGroupReplyValidationError is the validation error returned by
// UpdateTaskGroupReply.Validate if the designated constraints aren't met.
type UpdateTaskGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskGroupReplyValidationError) ErrorName() string {
	return "UpdateTaskGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskGroupReplyValidationError{}

// Validate checks the field values on DeleteTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTaskGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTaskGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTaskGroupRequestMultiError, or nil if none found.
func (m *DeleteTaskGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTaskGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteTaskGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTaskGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteTaskGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTaskGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTaskGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTaskGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTaskGroupRequestMultiError) AllErrors() []error { return m }

// DeleteTaskGroupRequestValidationError is the validation error returned by
// DeleteTaskGroupRequest.Validate if the designated constraints aren't met.
type DeleteTaskGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskGroupRequestValidationError) ErrorName() string {
	return "DeleteTaskGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskGroupRequestValidationError{}

// Validate checks the field values on DeleteTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTaskGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTaskGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTaskGroupReplyMultiError, or nil if none found.
func (m *DeleteTaskGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTaskGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTaskGroupReplyMultiError(errors)
	}

	return nil
}

// DeleteTaskGroupReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTaskGroupReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTaskGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTaskGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTaskGroupReplyMultiError) AllErrors() []error { return m }

// DeleteTaskGroupReplyValidationError is the validation error returned by
// DeleteTaskGroupReply.Validate if the designated constraints aren't met.
type DeleteTaskGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskGroupReplyValidationError) ErrorName() string {
	return "DeleteTaskGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskGroupReplyValidationError{}

// Validate checks the field values on ListTaskGroupReply_TaskGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskGroupReply_TaskGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskGroupReply_TaskGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskGroupReply_TaskGroupMultiError, or nil if none found.
func (m *ListTaskGroupReply_TaskGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskGroupReply_TaskGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListTaskGroupReply_TaskGroupMultiError(errors)
	}

	return nil
}

// ListTaskGroupReply_TaskGroupMultiError is an error wrapping multiple
// validation errors returned by ListTaskGroupReply_TaskGroup.ValidateAll() if
// the designated constraints aren't met.
type ListTaskGroupReply_TaskGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskGroupReply_TaskGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskGroupReply_TaskGroupMultiError) AllErrors() []error { return m }

// ListTaskGroupReply_TaskGroupValidationError is the validation error returned
// by ListTaskGroupReply_TaskGroup.Validate if the designated constraints
// aren't met.
type ListTaskGroupReply_TaskGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskGroupReply_TaskGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskGroupReply_TaskGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskGroupReply_TaskGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskGroupReply_TaskGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskGroupReply_TaskGroupValidationError) ErrorName() string {
	return "ListTaskGroupReply_TaskGroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskGroupReply_TaskGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskGroupReply_TaskGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskGroupReply_TaskGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskGroupReply_TaskGroupValidationError{}
