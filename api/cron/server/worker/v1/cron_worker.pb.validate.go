// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cron/server/worker/cron_worker.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetWorkerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkerRequestMultiError, or nil if none found.
func (m *GetWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := GetWorkerRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Ip != nil {

		if utf8.RuneCountInString(m.GetIp()) < 1 {
			err := GetWorkerRequestValidationError{
				field:  "Ip",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetWorkerRequestMultiError(errors)
	}

	return nil
}

// GetWorkerRequestMultiError is an error wrapping multiple validation errors
// returned by GetWorkerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerRequestMultiError) AllErrors() []error { return m }

// GetWorkerRequestValidationError is the validation error returned by
// GetWorkerRequest.Validate if the designated constraints aren't met.
type GetWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerRequestValidationError) ErrorName() string { return "GetWorkerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerRequestValidationError{}

// Validate checks the field values on GetWorkerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWorkerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetWorkerReplyMultiError,
// or nil if none found.
func (m *GetWorkerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Ip

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.GroupId != nil {
		// no validation rules for GroupId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetWorkerReplyMultiError(errors)
	}

	return nil
}

// GetWorkerReplyMultiError is an error wrapping multiple validation errors
// returned by GetWorkerReply.ValidateAll() if the designated constraints
// aren't met.
type GetWorkerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerReplyMultiError) AllErrors() []error { return m }

// GetWorkerReplyValidationError is the validation error returned by
// GetWorkerReply.Validate if the designated constraints aren't met.
type GetWorkerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerReplyValidationError) ErrorName() string { return "GetWorkerReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetWorkerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerReplyValidationError{}

// Validate checks the field values on ListWorkerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkerRequestMultiError, or nil if none found.
func (m *ListWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListWorkerRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListWorkerRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListWorkerRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListWorkerRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListWorkerRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListWorkerRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Ip != nil {
		// no validation rules for Ip
	}

	if m.GroupId != nil {
		// no validation rules for GroupId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListWorkerRequestMultiError(errors)
	}

	return nil
}

// ListWorkerRequestMultiError is an error wrapping multiple validation errors
// returned by ListWorkerRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkerRequestMultiError) AllErrors() []error { return m }

// ListWorkerRequestValidationError is the validation error returned by
// ListWorkerRequest.Validate if the designated constraints aren't met.
type ListWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkerRequestValidationError) ErrorName() string {
	return "ListWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkerRequestValidationError{}

var _ListWorkerRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListWorkerRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListWorkerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWorkerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkerReplyMultiError, or nil if none found.
func (m *ListWorkerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkerReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWorkerReplyMultiError(errors)
	}

	return nil
}

// ListWorkerReplyMultiError is an error wrapping multiple validation errors
// returned by ListWorkerReply.ValidateAll() if the designated constraints
// aren't met.
type ListWorkerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkerReplyMultiError) AllErrors() []error { return m }

// ListWorkerReplyValidationError is the validation error returned by
// ListWorkerReply.Validate if the designated constraints aren't met.
type ListWorkerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkerReplyValidationError) ErrorName() string { return "ListWorkerReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListWorkerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkerReplyValidationError{}

// Validate checks the field values on CreateWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkerRequestMultiError, or nil if none found.
func (m *CreateWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateWorkerRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := CreateWorkerRequestValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GroupId != nil {

		if m.GetGroupId() <= 0 {
			err := CreateWorkerRequestValidationError{
				field:  "GroupId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateWorkerRequestMultiError(errors)
	}

	return nil
}

// CreateWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkerRequestMultiError) AllErrors() []error { return m }

// CreateWorkerRequestValidationError is the validation error returned by
// CreateWorkerRequest.Validate if the designated constraints aren't met.
type CreateWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkerRequestValidationError) ErrorName() string {
	return "CreateWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkerRequestValidationError{}

// Validate checks the field values on CreateWorkerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkerReplyMultiError, or nil if none found.
func (m *CreateWorkerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateWorkerReplyMultiError(errors)
	}

	return nil
}

// CreateWorkerReplyMultiError is an error wrapping multiple validation errors
// returned by CreateWorkerReply.ValidateAll() if the designated constraints
// aren't met.
type CreateWorkerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkerReplyMultiError) AllErrors() []error { return m }

// CreateWorkerReplyValidationError is the validation error returned by
// CreateWorkerReply.Validate if the designated constraints aren't met.
type CreateWorkerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkerReplyValidationError) ErrorName() string {
	return "CreateWorkerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkerReplyValidationError{}

// Validate checks the field values on UpdateWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerRequestMultiError, or nil if none found.
func (m *UpdateWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateWorkerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateWorkerRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := UpdateWorkerRequestValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GroupId != nil {

		if m.GetGroupId() <= 0 {
			err := UpdateWorkerRequestValidationError{
				field:  "GroupId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateWorkerRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerRequestMultiError) AllErrors() []error { return m }

// UpdateWorkerRequestValidationError is the validation error returned by
// UpdateWorkerRequest.Validate if the designated constraints aren't met.
type UpdateWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerRequestValidationError) ErrorName() string {
	return "UpdateWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerRequestValidationError{}

// Validate checks the field values on UpdateWorkerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerReplyMultiError, or nil if none found.
func (m *UpdateWorkerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateWorkerReplyMultiError(errors)
	}

	return nil
}

// UpdateWorkerReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateWorkerReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateWorkerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerReplyMultiError) AllErrors() []error { return m }

// UpdateWorkerReplyValidationError is the validation error returned by
// UpdateWorkerReply.Validate if the designated constraints aren't met.
type UpdateWorkerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerReplyValidationError) ErrorName() string {
	return "UpdateWorkerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerReplyValidationError{}

// Validate checks the field values on UpdateWorkerStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerStatusRequestMultiError, or nil if none found.
func (m *UpdateWorkerStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateWorkerStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateWorkerStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkerStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkerStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateWorkerStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerStatusRequestMultiError) AllErrors() []error { return m }

// UpdateWorkerStatusRequestValidationError is the validation error returned by
// UpdateWorkerStatusRequest.Validate if the designated constraints aren't met.
type UpdateWorkerStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerStatusRequestValidationError) ErrorName() string {
	return "UpdateWorkerStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerStatusRequestValidationError{}

// Validate checks the field values on UpdateWorkerStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerStatusReplyMultiError, or nil if none found.
func (m *UpdateWorkerStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateWorkerStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateWorkerStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkerStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkerStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerStatusReplyMultiError) AllErrors() []error { return m }

// UpdateWorkerStatusReplyValidationError is the validation error returned by
// UpdateWorkerStatusReply.Validate if the designated constraints aren't met.
type UpdateWorkerStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerStatusReplyValidationError) ErrorName() string {
	return "UpdateWorkerStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerStatusReplyValidationError{}

// Validate checks the field values on DeleteWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkerRequestMultiError, or nil if none found.
func (m *DeleteWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteWorkerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWorkerRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkerRequestMultiError) AllErrors() []error { return m }

// DeleteWorkerRequestValidationError is the validation error returned by
// DeleteWorkerRequest.Validate if the designated constraints aren't met.
type DeleteWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkerRequestValidationError) ErrorName() string {
	return "DeleteWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkerRequestValidationError{}

// Validate checks the field values on DeleteWorkerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkerReplyMultiError, or nil if none found.
func (m *DeleteWorkerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteWorkerReplyMultiError(errors)
	}

	return nil
}

// DeleteWorkerReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteWorkerReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteWorkerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkerReplyMultiError) AllErrors() []error { return m }

// DeleteWorkerReplyValidationError is the validation error returned by
// DeleteWorkerReply.Validate if the designated constraints aren't met.
type DeleteWorkerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkerReplyValidationError) ErrorName() string {
	return "DeleteWorkerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkerReplyValidationError{}

// Validate checks the field values on ListWorkerReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkerReply_Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkerReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkerReply_GroupMultiError, or nil if none found.
func (m *ListWorkerReply_Group) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkerReply_Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ListWorkerReply_GroupMultiError(errors)
	}

	return nil
}

// ListWorkerReply_GroupMultiError is an error wrapping multiple validation
// errors returned by ListWorkerReply_Group.ValidateAll() if the designated
// constraints aren't met.
type ListWorkerReply_GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkerReply_GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkerReply_GroupMultiError) AllErrors() []error { return m }

// ListWorkerReply_GroupValidationError is the validation error returned by
// ListWorkerReply_Group.Validate if the designated constraints aren't met.
type ListWorkerReply_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkerReply_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkerReply_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkerReply_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkerReply_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkerReply_GroupValidationError) ErrorName() string {
	return "ListWorkerReply_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkerReply_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkerReply_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkerReply_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkerReply_GroupValidationError{}

// Validate checks the field values on ListWorkerReply_Worker with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkerReply_Worker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkerReply_Worker with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkerReply_WorkerMultiError, or nil if none found.
func (m *ListWorkerReply_Worker) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkerReply_Worker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Ip

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.GroupId != nil {
		// no validation rules for GroupId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Group != nil {

		if all {
			switch v := interface{}(m.GetGroup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkerReply_WorkerValidationError{
						field:  "Group",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkerReply_WorkerValidationError{
						field:  "Group",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkerReply_WorkerValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWorkerReply_WorkerMultiError(errors)
	}

	return nil
}

// ListWorkerReply_WorkerMultiError is an error wrapping multiple validation
// errors returned by ListWorkerReply_Worker.ValidateAll() if the designated
// constraints aren't met.
type ListWorkerReply_WorkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkerReply_WorkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkerReply_WorkerMultiError) AllErrors() []error { return m }

// ListWorkerReply_WorkerValidationError is the validation error returned by
// ListWorkerReply_Worker.Validate if the designated constraints aren't met.
type ListWorkerReply_WorkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkerReply_WorkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkerReply_WorkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkerReply_WorkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkerReply_WorkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkerReply_WorkerValidationError) ErrorName() string {
	return "ListWorkerReply_WorkerValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkerReply_WorkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkerReply_Worker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkerReply_WorkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkerReply_WorkerValidationError{}
