// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cron/server/worker/cron_worker_group.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetWorkerGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkerGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkerGroupRequestMultiError, or nil if none found.
func (m *GetWorkerGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetWorkerGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWorkerGroupRequestMultiError(errors)
	}

	return nil
}

// GetWorkerGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkerGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkerGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerGroupRequestMultiError) AllErrors() []error { return m }

// GetWorkerGroupRequestValidationError is the validation error returned by
// GetWorkerGroupRequest.Validate if the designated constraints aren't met.
type GetWorkerGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerGroupRequestValidationError) ErrorName() string {
	return "GetWorkerGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkerGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerGroupRequestValidationError{}

// Validate checks the field values on GetWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkerGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkerGroupReplyMultiError, or nil if none found.
func (m *GetWorkerGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetWorkerGroupReplyMultiError(errors)
	}

	return nil
}

// GetWorkerGroupReplyMultiError is an error wrapping multiple validation
// errors returned by GetWorkerGroupReply.ValidateAll() if the designated
// constraints aren't met.
type GetWorkerGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerGroupReplyMultiError) AllErrors() []error { return m }

// GetWorkerGroupReplyValidationError is the validation error returned by
// GetWorkerGroupReply.Validate if the designated constraints aren't met.
type GetWorkerGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerGroupReplyValidationError) ErrorName() string {
	return "GetWorkerGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkerGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerGroupReplyValidationError{}

// Validate checks the field values on ListWorkerGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkerGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkerGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkerGroupRequestMultiError, or nil if none found.
func (m *ListWorkerGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkerGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListWorkerGroupRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListWorkerGroupRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListWorkerGroupRequestMultiError(errors)
	}

	return nil
}

// ListWorkerGroupRequestMultiError is an error wrapping multiple validation
// errors returned by ListWorkerGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWorkerGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkerGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkerGroupRequestMultiError) AllErrors() []error { return m }

// ListWorkerGroupRequestValidationError is the validation error returned by
// ListWorkerGroupRequest.Validate if the designated constraints aren't met.
type ListWorkerGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkerGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkerGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkerGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkerGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkerGroupRequestValidationError) ErrorName() string {
	return "ListWorkerGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkerGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkerGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkerGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkerGroupRequestValidationError{}

// Validate checks the field values on ListWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkerGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkerGroupReplyMultiError, or nil if none found.
func (m *ListWorkerGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkerGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkerGroupReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkerGroupReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkerGroupReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWorkerGroupReplyMultiError(errors)
	}

	return nil
}

// ListWorkerGroupReplyMultiError is an error wrapping multiple validation
// errors returned by ListWorkerGroupReply.ValidateAll() if the designated
// constraints aren't met.
type ListWorkerGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkerGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkerGroupReplyMultiError) AllErrors() []error { return m }

// ListWorkerGroupReplyValidationError is the validation error returned by
// ListWorkerGroupReply.Validate if the designated constraints aren't met.
type ListWorkerGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkerGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkerGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkerGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkerGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkerGroupReplyValidationError) ErrorName() string {
	return "ListWorkerGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkerGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkerGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkerGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkerGroupReplyValidationError{}

// Validate checks the field values on CreateWorkerGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkerGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkerGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkerGroupRequestMultiError, or nil if none found.
func (m *CreateWorkerGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkerGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateWorkerGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateWorkerGroupRequestMultiError(errors)
	}

	return nil
}

// CreateWorkerGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkerGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkerGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkerGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkerGroupRequestMultiError) AllErrors() []error { return m }

// CreateWorkerGroupRequestValidationError is the validation error returned by
// CreateWorkerGroupRequest.Validate if the designated constraints aren't met.
type CreateWorkerGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkerGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkerGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkerGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkerGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkerGroupRequestValidationError) ErrorName() string {
	return "CreateWorkerGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkerGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkerGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkerGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkerGroupRequestValidationError{}

// Validate checks the field values on CreateWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkerGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkerGroupReplyMultiError, or nil if none found.
func (m *CreateWorkerGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkerGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateWorkerGroupReplyMultiError(errors)
	}

	return nil
}

// CreateWorkerGroupReplyMultiError is an error wrapping multiple validation
// errors returned by CreateWorkerGroupReply.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkerGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkerGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkerGroupReplyMultiError) AllErrors() []error { return m }

// CreateWorkerGroupReplyValidationError is the validation error returned by
// CreateWorkerGroupReply.Validate if the designated constraints aren't met.
type CreateWorkerGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkerGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkerGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkerGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkerGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkerGroupReplyValidationError) ErrorName() string {
	return "CreateWorkerGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkerGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkerGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkerGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkerGroupReplyValidationError{}

// Validate checks the field values on UpdateWorkerGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerGroupRequestMultiError, or nil if none found.
func (m *UpdateWorkerGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateWorkerGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateWorkerGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateWorkerGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkerGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkerGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkerGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerGroupRequestMultiError) AllErrors() []error { return m }

// UpdateWorkerGroupRequestValidationError is the validation error returned by
// UpdateWorkerGroupRequest.Validate if the designated constraints aren't met.
type UpdateWorkerGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerGroupRequestValidationError) ErrorName() string {
	return "UpdateWorkerGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerGroupRequestValidationError{}

// Validate checks the field values on UpdateWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerGroupReplyMultiError, or nil if none found.
func (m *UpdateWorkerGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateWorkerGroupReplyMultiError(errors)
	}

	return nil
}

// UpdateWorkerGroupReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkerGroupReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkerGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerGroupReplyMultiError) AllErrors() []error { return m }

// UpdateWorkerGroupReplyValidationError is the validation error returned by
// UpdateWorkerGroupReply.Validate if the designated constraints aren't met.
type UpdateWorkerGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerGroupReplyValidationError) ErrorName() string {
	return "UpdateWorkerGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerGroupReplyValidationError{}

// Validate checks the field values on DeleteWorkerGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkerGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkerGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkerGroupRequestMultiError, or nil if none found.
func (m *DeleteWorkerGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkerGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteWorkerGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWorkerGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkerGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkerGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkerGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkerGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkerGroupRequestMultiError) AllErrors() []error { return m }

// DeleteWorkerGroupRequestValidationError is the validation error returned by
// DeleteWorkerGroupRequest.Validate if the designated constraints aren't met.
type DeleteWorkerGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkerGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkerGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkerGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkerGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkerGroupRequestValidationError) ErrorName() string {
	return "DeleteWorkerGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkerGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkerGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkerGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkerGroupRequestValidationError{}

// Validate checks the field values on DeleteWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkerGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkerGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkerGroupReplyMultiError, or nil if none found.
func (m *DeleteWorkerGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkerGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteWorkerGroupReplyMultiError(errors)
	}

	return nil
}

// DeleteWorkerGroupReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkerGroupReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkerGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkerGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkerGroupReplyMultiError) AllErrors() []error { return m }

// DeleteWorkerGroupReplyValidationError is the validation error returned by
// DeleteWorkerGroupReply.Validate if the designated constraints aren't met.
type DeleteWorkerGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkerGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkerGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkerGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkerGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkerGroupReplyValidationError) ErrorName() string {
	return "DeleteWorkerGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkerGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkerGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkerGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkerGroupReplyValidationError{}

// Validate checks the field values on ListWorkerGroupReply_WorkerGroup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWorkerGroupReply_WorkerGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkerGroupReply_WorkerGroup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWorkerGroupReply_WorkerGroupMultiError, or nil if none found.
func (m *ListWorkerGroupReply_WorkerGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkerGroupReply_WorkerGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListWorkerGroupReply_WorkerGroupMultiError(errors)
	}

	return nil
}

// ListWorkerGroupReply_WorkerGroupMultiError is an error wrapping multiple
// validation errors returned by
// ListWorkerGroupReply_WorkerGroup.ValidateAll() if the designated
// constraints aren't met.
type ListWorkerGroupReply_WorkerGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkerGroupReply_WorkerGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkerGroupReply_WorkerGroupMultiError) AllErrors() []error { return m }

// ListWorkerGroupReply_WorkerGroupValidationError is the validation error
// returned by ListWorkerGroupReply_WorkerGroup.Validate if the designated
// constraints aren't met.
type ListWorkerGroupReply_WorkerGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkerGroupReply_WorkerGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkerGroupReply_WorkerGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkerGroupReply_WorkerGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkerGroupReply_WorkerGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkerGroupReply_WorkerGroupValidationError) ErrorName() string {
	return "ListWorkerGroupReply_WorkerGroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkerGroupReply_WorkerGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkerGroupReply_WorkerGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkerGroupReply_WorkerGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkerGroupReply_WorkerGroupValidationError{}
