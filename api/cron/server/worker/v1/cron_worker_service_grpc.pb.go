// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/cron/server/worker/cron_worker_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Worker_GetWorkerGroup_FullMethodName     = "/cron.api.server.cron.worker.v1.Worker/GetWorkerGroup"
	Worker_ListWorkerGroup_FullMethodName    = "/cron.api.server.cron.worker.v1.Worker/ListWorkerGroup"
	Worker_CreateWorkerGroup_FullMethodName  = "/cron.api.server.cron.worker.v1.Worker/CreateWorkerGroup"
	Worker_UpdateWorkerGroup_FullMethodName  = "/cron.api.server.cron.worker.v1.Worker/UpdateWorkerGroup"
	Worker_DeleteWorkerGroup_FullMethodName  = "/cron.api.server.cron.worker.v1.Worker/DeleteWorkerGroup"
	Worker_GetWorker_FullMethodName          = "/cron.api.server.cron.worker.v1.Worker/GetWorker"
	Worker_ListWorker_FullMethodName         = "/cron.api.server.cron.worker.v1.Worker/ListWorker"
	Worker_CreateWorker_FullMethodName       = "/cron.api.server.cron.worker.v1.Worker/CreateWorker"
	Worker_UpdateWorker_FullMethodName       = "/cron.api.server.cron.worker.v1.Worker/UpdateWorker"
	Worker_UpdateWorkerStatus_FullMethodName = "/cron.api.server.cron.worker.v1.Worker/UpdateWorkerStatus"
	Worker_DeleteWorker_FullMethodName       = "/cron.api.server.cron.worker.v1.Worker/DeleteWorker"
)

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	// GetWorkerGroup 获取指定的节点分组
	GetWorkerGroup(ctx context.Context, in *GetWorkerGroupRequest, opts ...grpc.CallOption) (*GetWorkerGroupReply, error)
	// ListWorkerGroup 获取节点分组列表
	ListWorkerGroup(ctx context.Context, in *ListWorkerGroupRequest, opts ...grpc.CallOption) (*ListWorkerGroupReply, error)
	// CreateWorkerGroup 创建节点分组
	CreateWorkerGroup(ctx context.Context, in *CreateWorkerGroupRequest, opts ...grpc.CallOption) (*CreateWorkerGroupReply, error)
	// UpdateWorkerGroup 更新节点分组
	UpdateWorkerGroup(ctx context.Context, in *UpdateWorkerGroupRequest, opts ...grpc.CallOption) (*UpdateWorkerGroupReply, error)
	// DeleteWorkerGroup 删除节点分组
	DeleteWorkerGroup(ctx context.Context, in *DeleteWorkerGroupRequest, opts ...grpc.CallOption) (*DeleteWorkerGroupReply, error)
	// GetWorker 获取指定的节点信息
	GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*GetWorkerReply, error)
	// ListWorker 获取节点信息列表
	ListWorker(ctx context.Context, in *ListWorkerRequest, opts ...grpc.CallOption) (*ListWorkerReply, error)
	// CreateWorker 创建节点信息
	CreateWorker(ctx context.Context, in *CreateWorkerRequest, opts ...grpc.CallOption) (*CreateWorkerReply, error)
	// UpdateWorker 更新节点信息
	UpdateWorker(ctx context.Context, in *UpdateWorkerRequest, opts ...grpc.CallOption) (*UpdateWorkerReply, error)
	// UpdateWorkerStatus 更新节点信息状态
	UpdateWorkerStatus(ctx context.Context, in *UpdateWorkerStatusRequest, opts ...grpc.CallOption) (*UpdateWorkerStatusReply, error)
	// DeleteWorker 删除节点信息
	DeleteWorker(ctx context.Context, in *DeleteWorkerRequest, opts ...grpc.CallOption) (*DeleteWorkerReply, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) GetWorkerGroup(ctx context.Context, in *GetWorkerGroupRequest, opts ...grpc.CallOption) (*GetWorkerGroupReply, error) {
	out := new(GetWorkerGroupReply)
	err := c.cc.Invoke(ctx, Worker_GetWorkerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ListWorkerGroup(ctx context.Context, in *ListWorkerGroupRequest, opts ...grpc.CallOption) (*ListWorkerGroupReply, error) {
	out := new(ListWorkerGroupReply)
	err := c.cc.Invoke(ctx, Worker_ListWorkerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) CreateWorkerGroup(ctx context.Context, in *CreateWorkerGroupRequest, opts ...grpc.CallOption) (*CreateWorkerGroupReply, error) {
	out := new(CreateWorkerGroupReply)
	err := c.cc.Invoke(ctx, Worker_CreateWorkerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) UpdateWorkerGroup(ctx context.Context, in *UpdateWorkerGroupRequest, opts ...grpc.CallOption) (*UpdateWorkerGroupReply, error) {
	out := new(UpdateWorkerGroupReply)
	err := c.cc.Invoke(ctx, Worker_UpdateWorkerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) DeleteWorkerGroup(ctx context.Context, in *DeleteWorkerGroupRequest, opts ...grpc.CallOption) (*DeleteWorkerGroupReply, error) {
	out := new(DeleteWorkerGroupReply)
	err := c.cc.Invoke(ctx, Worker_DeleteWorkerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*GetWorkerReply, error) {
	out := new(GetWorkerReply)
	err := c.cc.Invoke(ctx, Worker_GetWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ListWorker(ctx context.Context, in *ListWorkerRequest, opts ...grpc.CallOption) (*ListWorkerReply, error) {
	out := new(ListWorkerReply)
	err := c.cc.Invoke(ctx, Worker_ListWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) CreateWorker(ctx context.Context, in *CreateWorkerRequest, opts ...grpc.CallOption) (*CreateWorkerReply, error) {
	out := new(CreateWorkerReply)
	err := c.cc.Invoke(ctx, Worker_CreateWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) UpdateWorker(ctx context.Context, in *UpdateWorkerRequest, opts ...grpc.CallOption) (*UpdateWorkerReply, error) {
	out := new(UpdateWorkerReply)
	err := c.cc.Invoke(ctx, Worker_UpdateWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) UpdateWorkerStatus(ctx context.Context, in *UpdateWorkerStatusRequest, opts ...grpc.CallOption) (*UpdateWorkerStatusReply, error) {
	out := new(UpdateWorkerStatusReply)
	err := c.cc.Invoke(ctx, Worker_UpdateWorkerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) DeleteWorker(ctx context.Context, in *DeleteWorkerRequest, opts ...grpc.CallOption) (*DeleteWorkerReply, error) {
	out := new(DeleteWorkerReply)
	err := c.cc.Invoke(ctx, Worker_DeleteWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	// GetWorkerGroup 获取指定的节点分组
	GetWorkerGroup(context.Context, *GetWorkerGroupRequest) (*GetWorkerGroupReply, error)
	// ListWorkerGroup 获取节点分组列表
	ListWorkerGroup(context.Context, *ListWorkerGroupRequest) (*ListWorkerGroupReply, error)
	// CreateWorkerGroup 创建节点分组
	CreateWorkerGroup(context.Context, *CreateWorkerGroupRequest) (*CreateWorkerGroupReply, error)
	// UpdateWorkerGroup 更新节点分组
	UpdateWorkerGroup(context.Context, *UpdateWorkerGroupRequest) (*UpdateWorkerGroupReply, error)
	// DeleteWorkerGroup 删除节点分组
	DeleteWorkerGroup(context.Context, *DeleteWorkerGroupRequest) (*DeleteWorkerGroupReply, error)
	// GetWorker 获取指定的节点信息
	GetWorker(context.Context, *GetWorkerRequest) (*GetWorkerReply, error)
	// ListWorker 获取节点信息列表
	ListWorker(context.Context, *ListWorkerRequest) (*ListWorkerReply, error)
	// CreateWorker 创建节点信息
	CreateWorker(context.Context, *CreateWorkerRequest) (*CreateWorkerReply, error)
	// UpdateWorker 更新节点信息
	UpdateWorker(context.Context, *UpdateWorkerRequest) (*UpdateWorkerReply, error)
	// UpdateWorkerStatus 更新节点信息状态
	UpdateWorkerStatus(context.Context, *UpdateWorkerStatusRequest) (*UpdateWorkerStatusReply, error)
	// DeleteWorker 删除节点信息
	DeleteWorker(context.Context, *DeleteWorkerRequest) (*DeleteWorkerReply, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) GetWorkerGroup(context.Context, *GetWorkerGroupRequest) (*GetWorkerGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerGroup not implemented")
}
func (UnimplementedWorkerServer) ListWorkerGroup(context.Context, *ListWorkerGroupRequest) (*ListWorkerGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkerGroup not implemented")
}
func (UnimplementedWorkerServer) CreateWorkerGroup(context.Context, *CreateWorkerGroupRequest) (*CreateWorkerGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkerGroup not implemented")
}
func (UnimplementedWorkerServer) UpdateWorkerGroup(context.Context, *UpdateWorkerGroupRequest) (*UpdateWorkerGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkerGroup not implemented")
}
func (UnimplementedWorkerServer) DeleteWorkerGroup(context.Context, *DeleteWorkerGroupRequest) (*DeleteWorkerGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkerGroup not implemented")
}
func (UnimplementedWorkerServer) GetWorker(context.Context, *GetWorkerRequest) (*GetWorkerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (UnimplementedWorkerServer) ListWorker(context.Context, *ListWorkerRequest) (*ListWorkerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorker not implemented")
}
func (UnimplementedWorkerServer) CreateWorker(context.Context, *CreateWorkerRequest) (*CreateWorkerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorker not implemented")
}
func (UnimplementedWorkerServer) UpdateWorker(context.Context, *UpdateWorkerRequest) (*UpdateWorkerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorker not implemented")
}
func (UnimplementedWorkerServer) UpdateWorkerStatus(context.Context, *UpdateWorkerStatusRequest) (*UpdateWorkerStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkerStatus not implemented")
}
func (UnimplementedWorkerServer) DeleteWorker(context.Context, *DeleteWorkerRequest) (*DeleteWorkerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorker not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_GetWorkerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetWorkerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_GetWorkerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetWorkerGroup(ctx, req.(*GetWorkerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ListWorkerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ListWorkerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_ListWorkerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ListWorkerGroup(ctx, req.(*ListWorkerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_CreateWorkerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).CreateWorkerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_CreateWorkerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).CreateWorkerGroup(ctx, req.(*CreateWorkerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_UpdateWorkerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateWorkerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_UpdateWorkerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateWorkerGroup(ctx, req.(*UpdateWorkerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_DeleteWorkerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).DeleteWorkerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_DeleteWorkerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).DeleteWorkerGroup(ctx, req.(*DeleteWorkerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_GetWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetWorker(ctx, req.(*GetWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ListWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ListWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_ListWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ListWorker(ctx, req.(*ListWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_CreateWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).CreateWorker(ctx, req.(*CreateWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_UpdateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_UpdateWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateWorker(ctx, req.(*UpdateWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_UpdateWorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateWorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_UpdateWorkerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateWorkerStatus(ctx, req.(*UpdateWorkerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_DeleteWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).DeleteWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_DeleteWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).DeleteWorker(ctx, req.(*DeleteWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cron.api.server.cron.worker.v1.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkerGroup",
			Handler:    _Worker_GetWorkerGroup_Handler,
		},
		{
			MethodName: "ListWorkerGroup",
			Handler:    _Worker_ListWorkerGroup_Handler,
		},
		{
			MethodName: "CreateWorkerGroup",
			Handler:    _Worker_CreateWorkerGroup_Handler,
		},
		{
			MethodName: "UpdateWorkerGroup",
			Handler:    _Worker_UpdateWorkerGroup_Handler,
		},
		{
			MethodName: "DeleteWorkerGroup",
			Handler:    _Worker_DeleteWorkerGroup_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _Worker_GetWorker_Handler,
		},
		{
			MethodName: "ListWorker",
			Handler:    _Worker_ListWorker_Handler,
		},
		{
			MethodName: "CreateWorker",
			Handler:    _Worker_CreateWorker_Handler,
		},
		{
			MethodName: "UpdateWorker",
			Handler:    _Worker_UpdateWorker_Handler,
		},
		{
			MethodName: "UpdateWorkerStatus",
			Handler:    _Worker_UpdateWorkerStatus_Handler,
		},
		{
			MethodName: "DeleteWorker",
			Handler:    _Worker_DeleteWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cron/server/worker/cron_worker_service.proto",
}
