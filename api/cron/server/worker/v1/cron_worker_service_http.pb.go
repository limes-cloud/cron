// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/cron/server/worker/cron_worker_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWorkerCreateWorker = "/cron.api.server.cron.worker.v1.Worker/CreateWorker"
const OperationWorkerCreateWorkerGroup = "/cron.api.server.cron.worker.v1.Worker/CreateWorkerGroup"
const OperationWorkerDeleteWorker = "/cron.api.server.cron.worker.v1.Worker/DeleteWorker"
const OperationWorkerDeleteWorkerGroup = "/cron.api.server.cron.worker.v1.Worker/DeleteWorkerGroup"
const OperationWorkerGetWorker = "/cron.api.server.cron.worker.v1.Worker/GetWorker"
const OperationWorkerGetWorkerGroup = "/cron.api.server.cron.worker.v1.Worker/GetWorkerGroup"
const OperationWorkerListWorker = "/cron.api.server.cron.worker.v1.Worker/ListWorker"
const OperationWorkerListWorkerGroup = "/cron.api.server.cron.worker.v1.Worker/ListWorkerGroup"
const OperationWorkerUpdateWorker = "/cron.api.server.cron.worker.v1.Worker/UpdateWorker"
const OperationWorkerUpdateWorkerGroup = "/cron.api.server.cron.worker.v1.Worker/UpdateWorkerGroup"
const OperationWorkerUpdateWorkerStatus = "/cron.api.server.cron.worker.v1.Worker/UpdateWorkerStatus"

type WorkerHTTPServer interface {
	// CreateWorker CreateWorker 创建节点信息
	CreateWorker(context.Context, *CreateWorkerRequest) (*CreateWorkerReply, error)
	// CreateWorkerGroup CreateWorkerGroup 创建节点分组
	CreateWorkerGroup(context.Context, *CreateWorkerGroupRequest) (*CreateWorkerGroupReply, error)
	// DeleteWorker DeleteWorker 删除节点信息
	DeleteWorker(context.Context, *DeleteWorkerRequest) (*DeleteWorkerReply, error)
	// DeleteWorkerGroup DeleteWorkerGroup 删除节点分组
	DeleteWorkerGroup(context.Context, *DeleteWorkerGroupRequest) (*DeleteWorkerGroupReply, error)
	// GetWorker GetWorker 获取指定的节点信息
	GetWorker(context.Context, *GetWorkerRequest) (*GetWorkerReply, error)
	// GetWorkerGroup GetWorkerGroup 获取指定的节点分组
	GetWorkerGroup(context.Context, *GetWorkerGroupRequest) (*GetWorkerGroupReply, error)
	// ListWorker ListWorker 获取节点信息列表
	ListWorker(context.Context, *ListWorkerRequest) (*ListWorkerReply, error)
	// ListWorkerGroup ListWorkerGroup 获取节点分组列表
	ListWorkerGroup(context.Context, *ListWorkerGroupRequest) (*ListWorkerGroupReply, error)
	// UpdateWorker UpdateWorker 更新节点信息
	UpdateWorker(context.Context, *UpdateWorkerRequest) (*UpdateWorkerReply, error)
	// UpdateWorkerGroup UpdateWorkerGroup 更新节点分组
	UpdateWorkerGroup(context.Context, *UpdateWorkerGroupRequest) (*UpdateWorkerGroupReply, error)
	// UpdateWorkerStatus UpdateWorkerStatus 更新节点信息状态
	UpdateWorkerStatus(context.Context, *UpdateWorkerStatusRequest) (*UpdateWorkerStatusReply, error)
}

func RegisterWorkerHTTPServer(s *http.Server, srv WorkerHTTPServer) {
	r := s.Route("/")
	r.GET("/cron/api/v1/worker_group", _Worker_GetWorkerGroup0_HTTP_Handler(srv))
	r.GET("/cron/api/v1/worker_groups", _Worker_ListWorkerGroup0_HTTP_Handler(srv))
	r.POST("/cron/api/v1/worker_group", _Worker_CreateWorkerGroup0_HTTP_Handler(srv))
	r.PUT("/cron/api/v1/worker_group", _Worker_UpdateWorkerGroup0_HTTP_Handler(srv))
	r.DELETE("/cron/api/v1/worker_group", _Worker_DeleteWorkerGroup0_HTTP_Handler(srv))
	r.GET("/cron/api/v1/worker", _Worker_GetWorker0_HTTP_Handler(srv))
	r.GET("/cron/api/v1/workers", _Worker_ListWorker0_HTTP_Handler(srv))
	r.POST("/cron/api/v1/worker", _Worker_CreateWorker0_HTTP_Handler(srv))
	r.PUT("/cron/api/v1/worker", _Worker_UpdateWorker0_HTTP_Handler(srv))
	r.PUT("/cron/api/v1/worker/status", _Worker_UpdateWorkerStatus0_HTTP_Handler(srv))
	r.DELETE("/cron/api/v1/worker", _Worker_DeleteWorker0_HTTP_Handler(srv))
}

func _Worker_GetWorkerGroup0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkerGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerGetWorkerGroup)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetWorkerGroup(ctx, req.(*GetWorkerGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkerGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_ListWorkerGroup0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWorkerGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerListWorkerGroup)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListWorkerGroup(ctx, req.(*ListWorkerGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWorkerGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_CreateWorkerGroup0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWorkerGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerCreateWorkerGroup)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateWorkerGroup(ctx, req.(*CreateWorkerGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWorkerGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_UpdateWorkerGroup0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWorkerGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerUpdateWorkerGroup)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateWorkerGroup(ctx, req.(*UpdateWorkerGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWorkerGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_DeleteWorkerGroup0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWorkerGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerDeleteWorkerGroup)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteWorkerGroup(ctx, req.(*DeleteWorkerGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteWorkerGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_GetWorker0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerGetWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetWorker(ctx, req.(*GetWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkerReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_ListWorker0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWorkerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerListWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListWorker(ctx, req.(*ListWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWorkerReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_CreateWorker0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWorkerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerCreateWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateWorker(ctx, req.(*CreateWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWorkerReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_UpdateWorker0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWorkerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerUpdateWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateWorker(ctx, req.(*UpdateWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWorkerReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_UpdateWorkerStatus0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWorkerStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerUpdateWorkerStatus)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateWorkerStatus(ctx, req.(*UpdateWorkerStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWorkerStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Worker_DeleteWorker0_HTTP_Handler(srv WorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWorkerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkerDeleteWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteWorker(ctx, req.(*DeleteWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteWorkerReply)
		return ctx.Result(200, reply)
	}
}

type WorkerHTTPClient interface {
	CreateWorker(ctx context.Context, req *CreateWorkerRequest, opts ...http.CallOption) (rsp *CreateWorkerReply, err error)
	CreateWorkerGroup(ctx context.Context, req *CreateWorkerGroupRequest, opts ...http.CallOption) (rsp *CreateWorkerGroupReply, err error)
	DeleteWorker(ctx context.Context, req *DeleteWorkerRequest, opts ...http.CallOption) (rsp *DeleteWorkerReply, err error)
	DeleteWorkerGroup(ctx context.Context, req *DeleteWorkerGroupRequest, opts ...http.CallOption) (rsp *DeleteWorkerGroupReply, err error)
	GetWorker(ctx context.Context, req *GetWorkerRequest, opts ...http.CallOption) (rsp *GetWorkerReply, err error)
	GetWorkerGroup(ctx context.Context, req *GetWorkerGroupRequest, opts ...http.CallOption) (rsp *GetWorkerGroupReply, err error)
	ListWorker(ctx context.Context, req *ListWorkerRequest, opts ...http.CallOption) (rsp *ListWorkerReply, err error)
	ListWorkerGroup(ctx context.Context, req *ListWorkerGroupRequest, opts ...http.CallOption) (rsp *ListWorkerGroupReply, err error)
	UpdateWorker(ctx context.Context, req *UpdateWorkerRequest, opts ...http.CallOption) (rsp *UpdateWorkerReply, err error)
	UpdateWorkerGroup(ctx context.Context, req *UpdateWorkerGroupRequest, opts ...http.CallOption) (rsp *UpdateWorkerGroupReply, err error)
	UpdateWorkerStatus(ctx context.Context, req *UpdateWorkerStatusRequest, opts ...http.CallOption) (rsp *UpdateWorkerStatusReply, err error)
}

type WorkerHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkerHTTPClient(client *http.Client) WorkerHTTPClient {
	return &WorkerHTTPClientImpl{client}
}

func (c *WorkerHTTPClientImpl) CreateWorker(ctx context.Context, in *CreateWorkerRequest, opts ...http.CallOption) (*CreateWorkerReply, error) {
	var out CreateWorkerReply
	pattern := "/cron/api/v1/worker"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkerCreateWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) CreateWorkerGroup(ctx context.Context, in *CreateWorkerGroupRequest, opts ...http.CallOption) (*CreateWorkerGroupReply, error) {
	var out CreateWorkerGroupReply
	pattern := "/cron/api/v1/worker_group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkerCreateWorkerGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) DeleteWorker(ctx context.Context, in *DeleteWorkerRequest, opts ...http.CallOption) (*DeleteWorkerReply, error) {
	var out DeleteWorkerReply
	pattern := "/cron/api/v1/worker"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkerDeleteWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) DeleteWorkerGroup(ctx context.Context, in *DeleteWorkerGroupRequest, opts ...http.CallOption) (*DeleteWorkerGroupReply, error) {
	var out DeleteWorkerGroupReply
	pattern := "/cron/api/v1/worker_group"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkerDeleteWorkerGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...http.CallOption) (*GetWorkerReply, error) {
	var out GetWorkerReply
	pattern := "/cron/api/v1/worker"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkerGetWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) GetWorkerGroup(ctx context.Context, in *GetWorkerGroupRequest, opts ...http.CallOption) (*GetWorkerGroupReply, error) {
	var out GetWorkerGroupReply
	pattern := "/cron/api/v1/worker_group"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkerGetWorkerGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) ListWorker(ctx context.Context, in *ListWorkerRequest, opts ...http.CallOption) (*ListWorkerReply, error) {
	var out ListWorkerReply
	pattern := "/cron/api/v1/workers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkerListWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) ListWorkerGroup(ctx context.Context, in *ListWorkerGroupRequest, opts ...http.CallOption) (*ListWorkerGroupReply, error) {
	var out ListWorkerGroupReply
	pattern := "/cron/api/v1/worker_groups"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkerListWorkerGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) UpdateWorker(ctx context.Context, in *UpdateWorkerRequest, opts ...http.CallOption) (*UpdateWorkerReply, error) {
	var out UpdateWorkerReply
	pattern := "/cron/api/v1/worker"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkerUpdateWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) UpdateWorkerGroup(ctx context.Context, in *UpdateWorkerGroupRequest, opts ...http.CallOption) (*UpdateWorkerGroupReply, error) {
	var out UpdateWorkerGroupReply
	pattern := "/cron/api/v1/worker_group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkerUpdateWorkerGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkerHTTPClientImpl) UpdateWorkerStatus(ctx context.Context, in *UpdateWorkerStatusRequest, opts ...http.CallOption) (*UpdateWorkerStatusReply, error) {
	var out UpdateWorkerStatusReply
	pattern := "/cron/api/v1/worker/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkerUpdateWorkerStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
