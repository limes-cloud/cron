// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cron_server_worker.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Worker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Worker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Worker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WorkerMultiError, or nil if none found.
func (m *Worker) ValidateAll() error {
	return m.validate(true)
}

func (m *Worker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Ip

	// no validation rules for Tag

	// no validation rules for Status

	// no validation rules for StopDesc

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return WorkerMultiError(errors)
	}

	return nil
}

// WorkerMultiError is an error wrapping multiple validation errors returned by
// Worker.ValidateAll() if the designated constraints aren't met.
type WorkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkerMultiError) AllErrors() []error { return m }

// WorkerValidationError is the validation error returned by Worker.Validate if
// the designated constraints aren't met.
type WorkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkerValidationError) ErrorName() string { return "WorkerValidationError" }

// Error satisfies the builtin error interface
func (e WorkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkerValidationError{}

// Validate checks the field values on PageWorkerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageWorkerRequestMultiError, or nil if none found.
func (m *PageWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageWorkerRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := PageWorkerRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Tag != nil {

		if utf8.RuneCountInString(m.GetTag()) < 1 {
			err := PageWorkerRequestValidationError{
				field:  "Tag",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Ip != nil {

		if ip := net.ParseIP(m.GetIp()); ip == nil {
			err := PageWorkerRequestValidationError{
				field:  "Ip",
				reason: "value must be a valid IP address",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {

		if utf8.RuneCountInString(m.GetName()) < 1 {
			err := PageWorkerRequestValidationError{
				field:  "Name",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return PageWorkerRequestMultiError(errors)
	}

	return nil
}

// PageWorkerRequestMultiError is an error wrapping multiple validation errors
// returned by PageWorkerRequest.ValidateAll() if the designated constraints
// aren't met.
type PageWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageWorkerRequestMultiError) AllErrors() []error { return m }

// PageWorkerRequestValidationError is the validation error returned by
// PageWorkerRequest.Validate if the designated constraints aren't met.
type PageWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageWorkerRequestValidationError) ErrorName() string {
	return "PageWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageWorkerRequestValidationError{}

// Validate checks the field values on PageWorkerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageWorkerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageWorkerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageWorkerReplyMultiError, or nil if none found.
func (m *PageWorkerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageWorkerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageWorkerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageWorkerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageWorkerReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageWorkerReplyMultiError(errors)
	}

	return nil
}

// PageWorkerReplyMultiError is an error wrapping multiple validation errors
// returned by PageWorkerReply.ValidateAll() if the designated constraints
// aren't met.
type PageWorkerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageWorkerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageWorkerReplyMultiError) AllErrors() []error { return m }

// PageWorkerReplyValidationError is the validation error returned by
// PageWorkerReply.Validate if the designated constraints aren't met.
type PageWorkerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageWorkerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageWorkerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageWorkerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageWorkerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageWorkerReplyValidationError) ErrorName() string { return "PageWorkerReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageWorkerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageWorkerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageWorkerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageWorkerReplyValidationError{}

// Validate checks the field values on AddWorkerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWorkerRequestMultiError, or nil if none found.
func (m *AddWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddWorkerRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := AddWorkerRequestValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTag()) < 1 {
		err := AddWorkerRequestValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := AddWorkerRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddWorkerRequestMultiError(errors)
	}

	return nil
}

// AddWorkerRequestMultiError is an error wrapping multiple validation errors
// returned by AddWorkerRequest.ValidateAll() if the designated constraints
// aren't met.
type AddWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWorkerRequestMultiError) AllErrors() []error { return m }

// AddWorkerRequestValidationError is the validation error returned by
// AddWorkerRequest.Validate if the designated constraints aren't met.
type AddWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWorkerRequestValidationError) ErrorName() string { return "AddWorkerRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWorkerRequestValidationError{}

// Validate checks the field values on AddWorkerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddWorkerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWorkerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddWorkerReplyMultiError,
// or nil if none found.
func (m *AddWorkerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWorkerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddWorkerReplyMultiError(errors)
	}

	return nil
}

// AddWorkerReplyMultiError is an error wrapping multiple validation errors
// returned by AddWorkerReply.ValidateAll() if the designated constraints
// aren't met.
type AddWorkerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWorkerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWorkerReplyMultiError) AllErrors() []error { return m }

// AddWorkerReplyValidationError is the validation error returned by
// AddWorkerReply.Validate if the designated constraints aren't met.
type AddWorkerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWorkerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWorkerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWorkerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWorkerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWorkerReplyValidationError) ErrorName() string { return "AddWorkerReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddWorkerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWorkerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWorkerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWorkerReplyValidationError{}

// Validate checks the field values on UpdateWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerRequestMultiError, or nil if none found.
func (m *UpdateWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateWorkerRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := UpdateWorkerRequestValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTag()) < 1 {
		err := UpdateWorkerRequestValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := UpdateWorkerRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWorkerRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerRequestMultiError) AllErrors() []error { return m }

// UpdateWorkerRequestValidationError is the validation error returned by
// UpdateWorkerRequest.Validate if the designated constraints aren't met.
type UpdateWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerRequestValidationError) ErrorName() string {
	return "UpdateWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerRequestValidationError{}

// Validate checks the field values on OnlineWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineWorkerRequestMultiError, or nil if none found.
func (m *OnlineWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Params.(type) {
	case *OnlineWorkerRequest_Id:
		if v == nil {
			err := OnlineWorkerRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetId() <= 0 {
			err := OnlineWorkerRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *OnlineWorkerRequest_Ip:
		if v == nil {
			err := OnlineWorkerRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetIp()) < 1 {
			err := OnlineWorkerRequestValidationError{
				field:  "Ip",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return OnlineWorkerRequestMultiError(errors)
	}

	return nil
}

// OnlineWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by OnlineWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type OnlineWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineWorkerRequestMultiError) AllErrors() []error { return m }

// OnlineWorkerRequestValidationError is the validation error returned by
// OnlineWorkerRequest.Validate if the designated constraints aren't met.
type OnlineWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineWorkerRequestValidationError) ErrorName() string {
	return "OnlineWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineWorkerRequestValidationError{}

// Validate checks the field values on OfflineWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OfflineWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfflineWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfflineWorkerRequestMultiError, or nil if none found.
func (m *OfflineWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OfflineWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Params.(type) {
	case *OfflineWorkerRequest_Id:
		if v == nil {
			err := OfflineWorkerRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetId() <= 0 {
			err := OfflineWorkerRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *OfflineWorkerRequest_Ip:
		if v == nil {
			err := OfflineWorkerRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetIp()) < 1 {
			err := OfflineWorkerRequestValidationError{
				field:  "Ip",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return OfflineWorkerRequestMultiError(errors)
	}

	return nil
}

// OfflineWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by OfflineWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type OfflineWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfflineWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfflineWorkerRequestMultiError) AllErrors() []error { return m }

// OfflineWorkerRequestValidationError is the validation error returned by
// OfflineWorkerRequest.Validate if the designated constraints aren't met.
type OfflineWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfflineWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfflineWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfflineWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfflineWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfflineWorkerRequestValidationError) ErrorName() string {
	return "OfflineWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OfflineWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfflineWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfflineWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfflineWorkerRequestValidationError{}

// Validate checks the field values on DeleteWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkerRequestMultiError, or nil if none found.
func (m *DeleteWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteWorkerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWorkerRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkerRequestMultiError) AllErrors() []error { return m }

// DeleteWorkerRequestValidationError is the validation error returned by
// DeleteWorkerRequest.Validate if the designated constraints aren't met.
type DeleteWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkerRequestValidationError) ErrorName() string {
	return "DeleteWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkerRequestValidationError{}
