// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: cron_server_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddWorker = "/cron_server.Service/AddWorker"
const OperationServiceDeleteWorker = "/cron_server.Service/DeleteWorker"
const OperationServiceOfflineWorker = "/cron_server.Service/OfflineWorker"
const OperationServiceOnlineWorker = "/cron_server.Service/OnlineWorker"
const OperationServicePageWorker = "/cron_server.Service/PageWorker"
const OperationServiceUpdateWorker = "/cron_server.Service/UpdateWorker"

type ServiceHTTPServer interface {
	AddWorker(context.Context, *AddWorkerRequest) (*AddWorkerReply, error)
	DeleteWorker(context.Context, *DeleteWorkerRequest) (*emptypb.Empty, error)
	OfflineWorker(context.Context, *UpdateWorkerRequest) (*emptypb.Empty, error)
	OnlineWorker(context.Context, *UpdateWorkerRequest) (*emptypb.Empty, error)
	PageWorker(context.Context, *PageWorkerRequest) (*PageWorkerReply, error)
	UpdateWorker(context.Context, *UpdateWorkerRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/cron/v1/worker", _Service_PageWorker0_HTTP_Handler(srv))
	r.POST("/cron/v1/worker", _Service_AddWorker0_HTTP_Handler(srv))
	r.PUT("/cron/v1/worker", _Service_UpdateWorker0_HTTP_Handler(srv))
	r.POST("/cron/v1/worker/online", _Service_OnlineWorker0_HTTP_Handler(srv))
	r.POST("/cron/v1/worker/offline", _Service_OfflineWorker0_HTTP_Handler(srv))
	r.DELETE("/cron/v1/worker", _Service_DeleteWorker0_HTTP_Handler(srv))
}

func _Service_PageWorker0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageWorkerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageWorker(ctx, req.(*PageWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageWorkerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddWorker0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddWorkerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddWorker(ctx, req.(*AddWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddWorkerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateWorker0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWorkerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateWorker(ctx, req.(*UpdateWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_OnlineWorker0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWorkerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOnlineWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OnlineWorker(ctx, req.(*UpdateWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_OfflineWorker0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWorkerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOfflineWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OfflineWorker(ctx, req.(*UpdateWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteWorker0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWorkerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteWorker)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteWorker(ctx, req.(*DeleteWorkerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddWorker(ctx context.Context, req *AddWorkerRequest, opts ...http.CallOption) (rsp *AddWorkerReply, err error)
	DeleteWorker(ctx context.Context, req *DeleteWorkerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	OfflineWorker(ctx context.Context, req *UpdateWorkerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	OnlineWorker(ctx context.Context, req *UpdateWorkerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	PageWorker(ctx context.Context, req *PageWorkerRequest, opts ...http.CallOption) (rsp *PageWorkerReply, err error)
	UpdateWorker(ctx context.Context, req *UpdateWorkerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddWorker(ctx context.Context, in *AddWorkerRequest, opts ...http.CallOption) (*AddWorkerReply, error) {
	var out AddWorkerReply
	pattern := "/cron/v1/worker"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteWorker(ctx context.Context, in *DeleteWorkerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cron/v1/worker"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceDeleteWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OfflineWorker(ctx context.Context, in *UpdateWorkerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cron/v1/worker/offline"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceOfflineWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OnlineWorker(ctx context.Context, in *UpdateWorkerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cron/v1/worker/online"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceOnlineWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageWorker(ctx context.Context, in *PageWorkerRequest, opts ...http.CallOption) (*PageWorkerReply, error) {
	var out PageWorkerReply
	pattern := "/cron/v1/worker"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateWorker(ctx context.Context, in *UpdateWorkerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cron/v1/worker"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateWorker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
