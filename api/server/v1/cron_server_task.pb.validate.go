// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cron_server_task.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GroupId

	// no validation rules for Name

	// no validation rules for Tag

	// no validation rules for Spec

	// no validation rules for SelectType

	// no validation rules for ExecType

	// no validation rules for ExecValue

	// no validation rules for ExpectCode

	// no validation rules for RetryCount

	// no validation rules for RetryWaitTime

	// no validation rules for MaxExecTime

	// no validation rules for Status

	// no validation rules for Description

	if m.WorkerGroupId != nil {
		// no validation rules for WorkerGroupId
	}

	if m.WorkerId != nil {
		// no validation rules for WorkerId
	}

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on PageTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageTaskRequestMultiError, or nil if none found.
func (m *PageTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageTaskRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := PageTaskRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Tag != nil {

		if utf8.RuneCountInString(m.GetTag()) < 1 {
			err := PageTaskRequestValidationError{
				field:  "Tag",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Ip != nil {

		if ip := net.ParseIP(m.GetIp()); ip == nil {
			err := PageTaskRequestValidationError{
				field:  "Ip",
				reason: "value must be a valid IP address",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {

		if utf8.RuneCountInString(m.GetName()) < 1 {
			err := PageTaskRequestValidationError{
				field:  "Name",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return PageTaskRequestMultiError(errors)
	}

	return nil
}

// PageTaskRequestMultiError is an error wrapping multiple validation errors
// returned by PageTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type PageTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageTaskRequestMultiError) AllErrors() []error { return m }

// PageTaskRequestValidationError is the validation error returned by
// PageTaskRequest.Validate if the designated constraints aren't met.
type PageTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageTaskRequestValidationError) ErrorName() string { return "PageTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageTaskRequestValidationError{}

// Validate checks the field values on PageTaskReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageTaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageTaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageTaskReplyMultiError, or
// nil if none found.
func (m *PageTaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageTaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageTaskReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageTaskReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageTaskReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageTaskReplyMultiError(errors)
	}

	return nil
}

// PageTaskReplyMultiError is an error wrapping multiple validation errors
// returned by PageTaskReply.ValidateAll() if the designated constraints
// aren't met.
type PageTaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageTaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageTaskReplyMultiError) AllErrors() []error { return m }

// PageTaskReplyValidationError is the validation error returned by
// PageTaskReply.Validate if the designated constraints aren't met.
type PageTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageTaskReplyValidationError) ErrorName() string { return "PageTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageTaskReplyValidationError{}

// Validate checks the field values on AddTaskRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddTaskRequestMultiError,
// or nil if none found.
func (m *AddTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := AddTaskRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddTaskRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTag()) < 1 {
		err := AddTaskRequestValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpec()) < 1 {
		err := AddTaskRequestValidationError{
			field:  "Spec",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSelectType()) < 1 {
		err := AddTaskRequestValidationError{
			field:  "SelectType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExecType()) < 1 {
		err := AddTaskRequestValidationError{
			field:  "ExecType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExecValue()) < 1 {
		err := AddTaskRequestValidationError{
			field:  "ExecValue",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpectCode() < 0 {
		err := AddTaskRequestValidationError{
			field:  "ExpectCode",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRetryCount() < 0 {
		err := AddTaskRequestValidationError{
			field:  "RetryCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRetryWaitTime() < 0 {
		err := AddTaskRequestValidationError{
			field:  "RetryWaitTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxExecTime() < 0 {
		err := AddTaskRequestValidationError{
			field:  "MaxExecTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.WorkerGroupId != nil {

		if m.GetWorkerGroupId() <= 0 {
			err := AddTaskRequestValidationError{
				field:  "WorkerGroupId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.WorkerId != nil {

		if m.GetWorkerId() <= 0 {
			err := AddTaskRequestValidationError{
				field:  "WorkerId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AddTaskRequestMultiError(errors)
	}

	return nil
}

// AddTaskRequestMultiError is an error wrapping multiple validation errors
// returned by AddTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTaskRequestMultiError) AllErrors() []error { return m }

// AddTaskRequestValidationError is the validation error returned by
// AddTaskRequest.Validate if the designated constraints aren't met.
type AddTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTaskRequestValidationError) ErrorName() string { return "AddTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTaskRequestValidationError{}

// Validate checks the field values on AddTaskReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddTaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddTaskReplyMultiError, or
// nil if none found.
func (m *AddTaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddTaskReplyMultiError(errors)
	}

	return nil
}

// AddTaskReplyMultiError is an error wrapping multiple validation errors
// returned by AddTaskReply.ValidateAll() if the designated constraints aren't met.
type AddTaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTaskReplyMultiError) AllErrors() []error { return m }

// AddTaskReplyValidationError is the validation error returned by
// AddTaskReply.Validate if the designated constraints aren't met.
type AddTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTaskReplyValidationError) ErrorName() string { return "AddTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTaskReplyValidationError{}

// Validate checks the field values on UpdateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskRequestMultiError, or nil if none found.
func (m *UpdateTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateTaskRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGroupId() <= 0 {
		err := UpdateTaskRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateTaskRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTag()) < 1 {
		err := UpdateTaskRequestValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpec()) < 1 {
		err := UpdateTaskRequestValidationError{
			field:  "Spec",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSelectType()) < 1 {
		err := UpdateTaskRequestValidationError{
			field:  "SelectType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExecType()) < 1 {
		err := UpdateTaskRequestValidationError{
			field:  "ExecType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExecValue()) < 1 {
		err := UpdateTaskRequestValidationError{
			field:  "ExecValue",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpectCode() < 0 {
		err := UpdateTaskRequestValidationError{
			field:  "ExpectCode",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRetryCount() < 0 {
		err := UpdateTaskRequestValidationError{
			field:  "RetryCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRetryWaitTime() < 0 {
		err := UpdateTaskRequestValidationError{
			field:  "RetryWaitTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxExecTime() < 0 {
		err := UpdateTaskRequestValidationError{
			field:  "MaxExecTime",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.WorkerGroupId != nil {

		if m.GetWorkerGroupId() <= 0 {
			err := UpdateTaskRequestValidationError{
				field:  "WorkerGroupId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.WorkerId != nil {

		if m.GetWorkerId() <= 0 {
			err := UpdateTaskRequestValidationError{
				field:  "WorkerId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateTaskRequestMultiError(errors)
	}

	return nil
}

// UpdateTaskRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskRequestMultiError) AllErrors() []error { return m }

// UpdateTaskRequestValidationError is the validation error returned by
// UpdateTaskRequest.Validate if the designated constraints aren't met.
type UpdateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskRequestValidationError) ErrorName() string {
	return "UpdateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskRequestValidationError{}

// Validate checks the field values on EnableTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnableTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableTaskRequestMultiError, or nil if none found.
func (m *EnableTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := EnableTaskRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnableTaskRequestMultiError(errors)
	}

	return nil
}

// EnableTaskRequestMultiError is an error wrapping multiple validation errors
// returned by EnableTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type EnableTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableTaskRequestMultiError) AllErrors() []error { return m }

// EnableTaskRequestValidationError is the validation error returned by
// EnableTaskRequest.Validate if the designated constraints aren't met.
type EnableTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableTaskRequestValidationError) ErrorName() string {
	return "EnableTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableTaskRequestValidationError{}

// Validate checks the field values on DisableTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableTaskRequestMultiError, or nil if none found.
func (m *DisableTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DisableTaskRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableTaskRequestMultiError(errors)
	}

	return nil
}

// DisableTaskRequestMultiError is an error wrapping multiple validation errors
// returned by DisableTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type DisableTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableTaskRequestMultiError) AllErrors() []error { return m }

// DisableTaskRequestValidationError is the validation error returned by
// DisableTaskRequest.Validate if the designated constraints aren't met.
type DisableTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableTaskRequestValidationError) ErrorName() string {
	return "DisableTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableTaskRequestValidationError{}

// Validate checks the field values on DeleteTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTaskRequestMultiError, or nil if none found.
func (m *DeleteTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteTaskRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTaskRequestMultiError(errors)
	}

	return nil
}

// DeleteTaskRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTaskRequestMultiError) AllErrors() []error { return m }

// DeleteTaskRequestValidationError is the validation error returned by
// DeleteTaskRequest.Validate if the designated constraints aren't met.
type DeleteTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskRequestValidationError) ErrorName() string {
	return "DeleteTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskRequestValidationError{}

// Validate checks the field values on CancelExecTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelExecTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelExecTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelExecTaskRequestMultiError, or nil if none found.
func (m *CancelExecTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelExecTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := CancelExecTaskRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelExecTaskRequestMultiError(errors)
	}

	return nil
}

// CancelExecTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CancelExecTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelExecTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelExecTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelExecTaskRequestMultiError) AllErrors() []error { return m }

// CancelExecTaskRequestValidationError is the validation error returned by
// CancelExecTaskRequest.Validate if the designated constraints aren't met.
type CancelExecTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelExecTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelExecTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelExecTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelExecTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelExecTaskRequestValidationError) ErrorName() string {
	return "CancelExecTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelExecTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelExecTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelExecTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelExecTaskRequestValidationError{}
